name: Deploy to Vercel Production

on:
  release:
    types: [published]

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: ui/package-lock.json
      
      - name: Install dependencies
        working-directory: ui
        run: npm ci
      
      - name: Install Vercel CLI
        run: npm install --global vercel@latest
      
      - name: Link Vercel Project
        run: |
          cd ui
          vercel link --yes --project=${{ secrets.VERCEL_PROJECT_ID }} --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      
      - name: Pull Vercel Environment Information
        run: |
          cd ui
          vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      
      - name: Build Project Artifacts
        run: |
          cd ui
          vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      
      - name: Deploy to Vercel Production
        run: |
          cd ui
          DEPLOYMENT_URL=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
          echo "Deployed to: $DEPLOYMENT_URL"
          echo "deployment_url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
        id: deploy
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      
      - name: Comment on Release
        uses: actions/github-script@v7
        with:
          script: |
            const deployment_url = '${{ steps.deploy.outputs.deployment_url }}';
            const { owner, repo } = context.repo;
            const release_id = context.payload.release.id;
            
            await github.rest.repos.updateRelease({
              owner,
              repo,
              release_id,
              body: context.payload.release.body + 
                    '\n\n---\nðŸš€ **Deployed to Production:** ' + deployment_url
            });